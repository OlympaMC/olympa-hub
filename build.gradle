// Olympa Hub

plugins {
    id 'java'
}

repositories {
	mavenCentral()
    mavenLocal()

    maven {
        url = uri('https://repo.citizensnpcs.co/')
        content{
				includeGroup "net.citizensnpcs"
				includeGroup "org.mcmonkey"
        }
    }

    maven {
        url = uri('https://repo.codemc.org/repository/maven-public/')
    }

    maven {
        url = uri('https://papermc.io/repo/repository/maven-public/')
    }
}

configurations.all {
    resolutionStrategy.dependencySubstitution {
        substitute module("fr.olympa:olympa-api") with project(':olympa-api')
    }
}

dependencies {
    compileOnly 'fr.olympa:olympa-api:0.0.1-SNAPSHOT'
    compileOnly 'net.citizensnpcs:citizens-main:2.0.28-SNAPSHOT'
    compileOnly 'fr.skytasul:jukebox:1.19.6'
}

def getCheckedOutGitCommitHash() {
    def gitFolder = "$projectDir/.git/"
    def takeFromHash = 8
    def head = new File(gitFolder + "HEAD").text.split(":")
    def isCommit = head.length == 1

    if(isCommit) return head[0].trim().take(takeFromHash)

    def refHead = new File(gitFolder + head[1].trim())
    refHead.text.trim().take takeFromHash
}

def getGitBranch = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}

group = 'fr.olympa'
version = '0.0.2-SNAPSHOT'
description = 'olympa-hub'
java.sourceCompatibility = JavaVersion.VERSION_16

jar {
	archiveFileName = 'OlympaHub.jar'
	destinationDirectory = file('build')
}

processResources {
	outputs.upToDateWhen { false }
    filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
       "plugin_version": version + "-" + getGitBranch() + '-' + getCheckedOutGitCommitHash() + "-" + getDate()
    ]
}

sourceSets {
    main {
        java {
            srcDirs = ['src/java']
        }
        resources {
            srcDirs = ['src/resources']
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
